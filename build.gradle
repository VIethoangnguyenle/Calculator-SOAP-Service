
plugins {
	id 'org.springframework.boot' version '2.5.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.hoang'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

task genJaxb {
	ext.sourcesDir1 = "${buildDir}/generated-sources/jaxb/calculate"
	ext.sourcesDir2 = "${buildDir}/generated-sources/jaxb/convert"
	ext.sourcesDir3 = "${buildDir}/generated-sources/jaxb/flexcore"
	ext.classesDir1 = "${buildDir}/classes/jaxb/calculate"
	ext.classesDir2 = "${buildDir}/classes/jaxb/convert"
	ext.classesDir3 = "${buildDir}/classes/jaxb/flexcore"
	ext.schema1 = "/home/viethoang/Desktop/kss_docs/testSOAPService2/src/main/resources/wsdl/calculator.wsdl"
	ext.schema2 = "/home/viethoang/Desktop/kss_docs/testSOAPService2/src/main/resources/wsdl/convert.wsdl"
	ext.schema3 = "/home/viethoang/Desktop/kss_docs/testSOAPService2/src/main/resources/wsdl/flexcore.wsdl"
	outputs.dir classesDir1
	outputs.dir classesDir2
	outputs.dir classesDir3

	doLast() {
		project.ant {
			// Create output directories
			taskdef name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask',
					classpath: configurations.jaxb.asPath
			mkdir(dir: sourcesDir1)
			mkdir(dir: classesDir1)

			mkdir(dir: sourcesDir2)
			mkdir(dir: classesDir2)

			mkdir(dir: sourcesDir3)
			mkdir(dir: classesDir3)
			xjc(destdir: sourcesDir1, schema: schema1, package: "com.hoang.testSOAPService2.client") {
				arg(value: "-wsdl")
				produces(dir: sourcesDir1, includes: "**/*.java")
			}

			xjc(destdir: sourcesDir2, schema: schema2, package: "com.hoang.testSOAPService2.convertClient") {
				arg(value: "-wsdl")
				produces(dir: sourcesDir2, includes: "**/*.java")
			}

			xjc(destdir: sourcesDir3, schema: schema3, package: "com.hoang.testSOAPService2.flexcore") {
				arg(value: "-wsdl")
				produces(dir: sourcesDir2, includes: "**/*.java")
			}

			javac(destdir: classesDir1, source: 1.8, target: 1.8, debug: true,
					debugLevel: 'lines,vars,source',
					classpath: configurations.jaxb.asPath,
					includeAntRuntime: 'false') {
				src(path: sourcesDir1)
				include(name: '**/*.java')
				include(name: '*.java')
			}
			javac(destdir: classesDir2, source: 1.8, target: 1.8, debug: true,
					debugLevel: 'lines,vars,source',
					classpath: configurations.jaxb.asPath,
					includeAntRuntime: 'false') {
				src(path: sourcesDir2)
				include(name: '**/*.java')
				include(name: '*.java')
			}

			javac(destdir: classesDir3, source: 1.8, target: 1.8, debug: true,
					debugLevel: 'lines,vars,source',
					classpath: configurations.jaxb.asPath,
					includeAntRuntime: 'false') {
				src(path: sourcesDir3)
				include(name: '**/*.java')
				include(name: '*.java')
			}

			copy(todir: classesDir1) {
				fileset(dir: sourcesDir1, erroronmissingdir: false) {
					exclude(name: '**/*.java')
				}
			}

			copy(todir: classesDir2) {
				fileset(dir: sourcesDir2, erroronmissingdir: false) {
					exclude(name: '**/*.java')
				}
			}

			copy(todir: classesDir3) {
				fileset(dir: sourcesDir3, erroronmissingdir: false) {
					exclude(name: '**/*.java')
				}
			}

		}
	}
}
task afterEclipseImport {
	dependsOn "genJaxb"
}

configurations {
	jaxb
}
jar {
	from genJaxb.classesDir1
	from genJaxb.classesDir2
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	compileOnly 'org.projectlombok:lombok'

	implementation 'wsdl4j:wsdl4j:1.6.2'

	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.glassfish.jaxb:jaxb-runtime'
	implementation(files(genJaxb.classesDir1, genJaxb.classesDir2).builtBy(genJaxb))
	jaxb 'com.sun.xml.bind:jaxb-xjc:2.1.7'
}
test {
	useJUnitPlatform()
}
